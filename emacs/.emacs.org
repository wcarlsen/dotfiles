#+TITLE: Emacs config
#+AUTHOR: wcarlsen (Willi Carlsen)
#+PROPERTY: header-args:emacs-lisp :tangle ~/.emacs.d/init.el :results silent

* Package manager
  Straight package manager for the Emacs hacker.
  #+begin_src emacs-lisp
    (defvar bootstrap-version)
    (let ((bootstrap-file
	   (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
	  (bootstrap-version 5))
      (unless (file-exists-p bootstrap-file)
	(with-current-buffer
	    (url-retrieve-synchronously
	     "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
	     'silent 'inhibit-cookies)
	  (goto-char (point-max))
	  (eval-print-last-sexp)))
      (load bootstrap-file nil 'nomessage))
  #+end_src

  Prevent package.el loading packages prior to init-file loading.
  #+begin_src emacs-lisp
    (setq package-enable-at-startup nil)
  #+end_src

  Use use-package.
  #+begin_src emacs-lisp
    (straight-use-package 'use-package)
    (setq straight-use-package-by-default t)
  #+end_src

* Org
** Auto tangle
   Autotangle configuration files.
   #+begin_src emacs-lisp
     (defun efs/org-babel-tangle-config ()
       (when (string-equal (buffer-file-name)
                           (expand-file-name "~/.emacs.org"))
         ;; Dynamic scoping to the rescue
         (let ((org-confirm-babel-evaluate nil))
           (org-babel-tangle))))

     (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'efs/org-babel-tangle-config)))
   #+end_src

** Pretty bullets
   Configure pretty bullets.
   #+begin_src emacs-lisp
     (use-package org-bullets
       :config
       (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
   #+end_src

** Agenda
   Add files to agenda.
   #+begin_src emacs-lisp
     (setq org-agenda-files '("~/mylife.org"))
     (setq org-todo-keywords
           '((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d!)" "CANCELED(c@)")))
     (setq org-agenda-start-on-weekday 1)
   #+end_src

** Template snippets
   Org templates and add source code block snippit.
   #+begin_src emacs-lisp
     (require 'org-tempo)
     (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
     (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
   #+end_src

* Basics
** Better defaults
   Better defaults, such as disable menu bars etc.
   #+begin_src emacs-lisp
     (use-package better-defaults)
   #+end_src

** Backup/swap files
   Disable stupid backup/swap files.
    #+begin_src emacs-lisp
        (setq make-backup-files nil
              auto-save-default nil)
    #+end_src

** Line highlight
   Highlight current line.
   #+begin_src emacs-lisp
     ;; (global-hl-line-mode t)
     ;; (dolist (mode '(vterm-mode-hook))
     ;;   (add-hook mode (lambda () (global-hl-line-mode nil))))
   #+end_src

** Sounds
   Disable ring bell.
   #+begin_src emacs-lisp
     (setq ring-bell-function 'ignore)
   #+end_src

** Font and size
   Set font size.
   #+begin_src emacs-lisp
     (set-face-attribute 'default nil :height 110)
     (set-frame-font "JetBrainsMono Nerd Font" nil t)
   #+end_src

** Word wrap
   Enable word wrap
   #+begin_src emacs-lisp
     (global-visual-line-mode t)
   #+end_src

** Buffers
   Kill all but current buffer.

   #+begin_src emacs-lisp
     (defun kill-other-buffers ()
       "Kill all other buffers."
       (interactive)
       (mapc 'kill-buffer (delq (current-buffer) (buffer-list))))
   #+end_src

** Reload init
   Reload init.el file.

   #+begin_src emacs-lisp
     (defun reload-init ()
       "Reload init.el."
       (interactive)
       (load-file user-init-file))
   #+end_src

** Line numbers
   Enable line numbers with a few exceptions.
   #+begin_src emacs-lisp
     (column-number-mode)
     (global-display-line-numbers-mode t)
     (setq display-line-numbers-type 'relative)

     (dolist (mode '(org-mode-hook
                     vterm-mode-hook
                     neotree-mode-hook))
       (add-hook mode (lambda () (display-line-numbers-mode 0))))
   #+end_src

** Smartparens
   Auto pair parens.
   #+begin_src emacs-lisp
     (use-package smartparens
       :config
       (require 'smartparens-config)
       (smartparens-global-mode))
   #+end_src

** Rainbow-delimiters
   Color parens.
   #+begin_src emacs-lisp
     (use-package rainbow-delimiters
       :config
       (add-hook 'prog-mode-hook #'rainbow-delimiters-mode))
   #+end_src

** Indent-guide
   Show indentation guides.
   #+begin_src emacs-lisp
     (use-package indent-guide
       :config
       (add-hook 'prog-mode-hook #'indent-guide-mode))
   #+end_src

** Exec-path-from-shell
   Ensure Emacs same path from shell.
   #+begin_src emacs-lisp
     (use-package exec-path-from-shell
       :config
       (exec-path-from-shell-initialize))
   #+end_src

** Anzu
   Highlight search.
   #+begin_src emacs-lisp
     (use-package evil-anzu
       :after evil)
   #+end_src

** Which-key
   Show keybindings cheat sheet.
   #+begin_src emacs-lisp
     (use-package which-key
       :config
       (which-key-mode))
   #+end_src

** Trash
   Move stuff to trash when deleting.
   #+begin_src emacs-lisp
     (setq trash-directory "/home/wcarlsen/.local/share/Trash")
     (setq delete-by-moving-to-trash t)
   #+end_src

** Start server
   Always start Emacs server.
   #+begin_src emacs-lisp
     (load "server")
     (unless (server-running-p) (server-start))
   #+end_src

** Follow symlink
   Follow symlink behaviour.
   #+begin_src emacs-lisp
     (setq vc-follow-symlinks nil)
   #+end_src

* Themes
** Spacemacs theme
   Use the nice spacemacs theme.
   #+begin_src emacs-lisp
     (use-package spacemacs-theme
       :defer t
       :init (load-theme 'spacemacs-dark t))
   #+end_src

** Spaceline
   Beautiful modeline.
   #+begin_src emacs-lisp
     (use-package spaceline
       :config
       (require 'spaceline-config)
       (setq spaceline-highlight-face-func 'spaceline-highlight-face-evil-state)
       (setq powerline-default-separator 'wave)
              (spaceline-spacemacs-theme))
   #+end_src

* Git
** Magit
   Interactions with git.
   #+begin_src emacs-lisp
     (use-package magit)
   #+end_src

** Git-gutter
   Visual git indicators.
   #+begin_src emacs-lisp
     (use-package git-gutter
       :config
       (global-git-gutter-mode +1)
       (custom-set-variables '(git-gutter:update-interval 2)))
   #+end_src

* Vim
** Undu-fu
   #+begin_src emacs-lisp
     (use-package undo-fu)
   #+end_src

** Evil
   Vim experience.
   #+begin_src emacs-lisp
     (use-package evil
       :demand t
       :bind (("<escape>" . keyboard-escape-quit))
       :init
       (setq evil-want-integration t)
       (setq evil-want-keybinding nil)
       (setq evil-want-minibuffer nil)
       (setq evil-undo-system 'undo-fu)
       (setq evil-want-C-u-scroll t)
       :config
       (evil-ex-define-cmd "ls" 'ibuffer)
       (evil-ex-define-cmd "term" 'vterm)
       (evil-mode 1))

     (use-package evil-collection
       :after evil
       :config
       (setq evil-want-integration t)
       (evil-collection-init))

     (use-package evil-commentary
       :after evil
       :config
       (evil-commentary-mode))
   #+end_src

** General
   Define keybindings.
   #+begin_src emacs-lisp
     (use-package general
       :after evil
       :config
       (general-define-key
         :states '(normal motion visual) 
         :keymaps 'override
         :prefix "SPC"

         ;; M-x
         "SPC" '(execute-extended-command :which-key "M- x")

         ;; files
         "f" '(nil :which-key "files")
         "ff" '(find-file :which-key "find file")
         "fb" '(switch-to-buffer :which-key "switch buffer")
         "ft" '(neotree-toggle :which-key "neotree toggle")
         "fk" '(kill-buffer :which-key "kill buffer")

         ;; projects
         "p" '(nil :which-key "projects")
         "pp" '(projectile-switch-project :which-key "switch project")
         "pf" '(projectile-find-file :which-key "find file in project")
         "pb" '(projectile-switch-to-buffer :which-key "switch buffer in project")
         "pk" '(projectile-kill-buffers :which-key "kill buffers in project")
         "pg" '(projectile-grep :which-key "grep in project")

         ;; terminal
         "t" '(nil :which-key "terminal")
         "tt" '(vterm-toggle :which-key "vterm")

         ;; git
         "g" '(magit :which-key "magit")

         ;; errors
         "e" '(nil :which-key "errors")
         "el" '(flycheck-list-errors :which-key "error list")))
   #+end_src

* File explorer
** Neotree
   All others are too complex.
   #+begin_src emacs-lisp
     (use-package neotree
       :config
       (setq neo-theme (if (display-graphic-p) 'icons 'arrow))
       (setq neo-window-position 'right)
       (setq projectile-switch-project-action 'neotree-projectile-action)
       (setq neo-window-fixed-size nil))

     (use-package all-the-icons
       :after neotree)
   #+end_src

* Terminal
** Vterm
   Most naitive terminal experience.
   #+begin_src emacs-lisp
     (use-package vterm)

     (use-package vterm-toggle)
   #+end_src

* Project management
** Projectile 
   Navigate projects easy.
   #+begin_src emacs-lisp
     (use-package projectile
       :config
       (projectile-mode +1)
       (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
       (setq projectile-project-search-path '("~" "~/spaghetti/"))
       (projectile-discover-projects-in-search-path))
   #+end_src

* Auto complete
** Company
   Completion framework.
   #+begin_src emacs-lisp
     (use-package company
       :config
       ;; (company-tng-configure-default)
       (setq company-idle-delay 0.0)
       (setq company-minimum-prefix-length 1))

     (use-package company-quickhelp
       :after company
       :config
       (company-quickhelp-mode 1))

     (use-package company-box
       :after company
       :hook (company-mode . company-box-mode)
       :custom (company-box-icons-alist 'company-box-icons-all-the-icons))
   #+end_src

** Yasnippet
   Snippets.
   #+begin_src emacs-lisp
     (use-package yasnippet
       :config
       (yas-global-mode 1))

     (use-package yasnippet-snippets
       :after yasnippet)
   #+end_src

* Lint
** Flycheck
   Modern linting framework.
   #+begin_src emacs-lisp
     (use-package flycheck
       :init (global-flycheck-mode))
   #+end_src

* LSP
** Lsp-mode
   Language server protocol implementation.
   #+begin_src emacs-lisp
     (use-package lsp-mode
       ;; :after (which-key)
       :init
       (setq lsp-keymap-prefix "C-c l")
       :hook
       ;; (prog-mode . lsp-deferred)

       ;; (bash-mode . lsp-deferred)
       ;; (terraform-mode . lsp-deferred)

       (lsp-mode . lsp-enable-which-key-integration)
       :config
       (setq lsp-auto-guess-root t)
       :commands lsp)

     ;; translate lsp-keymap-prefix
     (define-key key-translation-map (kbd "SPC l") (kbd "C-c l"))
   #+end_src

** Dap
   Debugging.
   #+begin_src emacs-lisp
     (use-package dap-mode)
   #+end_src

* Coding
** Elisp
   Elisp-mode.
   #+begin_src emacs-lisp
     (add-hook 'emacs-lisp-mode-hook '(lambda ()
                                       (setq-local company-backends '(company-elisp company-dabbrev))
                                       (company-mode)))
   #+end_src

** Go-mode
   Golang mode.
   #+begin_src emacs-lisp
     (use-package go-mode
       :hook
       (go-mode . lsp-deferred)
       (go-mode . company-mode)
       (go-mode . lsp-go-install-save-hooks)
       :config
       (add-hook 'go-mode-hook (lambda () (setq tab-width 4
                                                indent-tabs-mode 1)))
       (require 'dap-go)
       (dap-go-setup))

     (defun lsp-go-install-save-hooks ()
       (add-hook 'before-save-hook #'lsp-format-buffer t t)
       (add-hook 'before-save-hook #'lsp-organize-imports t t))
   #+end_src

** Terraform
   Terraform mode.
   #+begin_src emacs-lisp
     (use-package terraform-mode)
   #+end_src

** Yaml
   Yaml mode.
   #+begin_src emacs-lisp
     (use-package yaml-mode
       :hook
       (yaml-mode . lsp-deferred)
       (yaml-mode . company-mode)
       :config
       (add-to-list 'auto-mode-alist '("\\.yml\\'" . yaml-mode))
       (add-to-list 'auto-mode-alist '("\\.yaml\\'" . yaml-mode))
       (add-hook 'yaml-mode-hook
       '(lambda ()
          (define-key yaml-mode-map "\C-m" 'newline-and-indent))))

   #+end_src

** Dockerfile
   Dockerfile.
   #+begin_src emacs-lisp
     (use-package dockerfile-mode
       :config
       (add-to-list 'auto-mode-alist '("Dockerfile\\'" . dockerfile-mode)))
   #+end_src

* Emojis
  Emojify.
  #+begin_src emacs-lisp
    ;; (use-package emojify
    ;;   :hook (after-init . global-emojify-mode))

    ;; (use-package company-emoji
    ;;   :after company
    ;;   :config
    ;;   (add-to-list 'company-backends 'company-emoji))
  #+end_src

* Vertico
** Vertico
   Better completion for M-x.
   #+begin_src emacs-lisp
     (use-package vertico
       :init
       (vertico-mode)
       :config
       (setq vertico-cycle t))

     (ido-mode nil) ;; wont work with this enabled
   #+end_src

** Marginalia
   More info in minibuffers.
   #+begin_src emacs-lisp
     (use-package marginalia
       :after vertico
       :init
       (marginalia-mode))
   #+end_src

** Orderless
   Like fuzzy search.
   #+begin_src emacs-lisp
     (use-package orderless
       :init
       (setq completion-styles '(orderless)
             completion-category-defaults nil
             completion-category-overrides '((file (styles partial-completion)))))
   #+end_src

** Savehist
   Persists history after restarts.
   #+begin_src emacs-lisp
     (use-package savehist
       :init
       (savehist-mode))
   #+end_src

