#+TITLE: Emacs config
#+AUTHOR: wcarlsen (Willi Carlsen)
#+PROPERTY: header-args:emacs-lisp :tangle ~/.emacs.d/init.el :results silent

* Package manager
  Straight package manager for the Emacs hacker.

  Bootstraping.
  #+begin_src emacs-lisp
    (defvar bootstrap-version)
    (let ((bootstrap-file
	   (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
	  (bootstrap-version 5))
      (unless (file-exists-p bootstrap-file)
	(with-current-buffer
	    (url-retrieve-synchronously
	     "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
	     'silent 'inhibit-cookies)
	  (goto-char (point-max))
	  (eval-print-last-sexp)))
      (load bootstrap-file nil 'nomessage))
  #+end_src

  Prevent package.el loading packages prior to init-file loading
  #+begin_src emacs-lisp
    (setq package-enable-at-startup nil)
  #+end_src

  Use use-package.
  #+begin_src emacs-lisp
    (straight-use-package 'use-package)
    (setq straight-use-package-by-default t)
  #+end_src

* Org
** Auto tangle
   
   Autotangle configuration files.
   
   #+begin_src emacs-lisp
     (defun efs/org-babel-tangle-config ()
       (when (string-equal (buffer-file-name)
                           (expand-file-name "~/.emacs.org"))
         ;; Dynamic scoping to the rescue
         (let ((org-confirm-babel-evaluate nil))
           (org-babel-tangle))))

     (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'efs/org-babel-tangle-config)))
   #+end_src 

** Pretty bullets
   Configure pretty bullets.

   #+begin_src emacs-lisp
     (use-package org-bullets
       :config
       (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
   #+end_src

** Agenda
   Add files to agenda.

   #+begin_src emacs-lisp
     (setq org-agenda-files '("~/mylife.org"))
     (setq org-todo-keywords
           '((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d!)" "CANCELED(c@)")))
   #+end_src

** Template snippets
   Org templates and add source code block snippit.

   #+begin_src emacs-lisp 
     (require 'org-tempo)
     (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
     (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
   #+end_src
   
* Better defaults
  Better defaults, such as disable menu bars etc.

   #+begin_src emacs-lisp
     (use-package better-defaults)
   #+end_src

* Basics
  Basic configurations.

** Better defaults
   Better defaults, such as disable menu bars etc.

   #+begin_src emacs-lisp
     (use-package better-defaults)
   #+end_src

** Backup/swap files
   Disable stupid backup/swap files.

    #+begin_src emacs-lisp
        (setq make-backup-files nil
              auto-save-default nil)
    #+end_src   

** Line highlight
   Highlight current line.

   #+begin_src emacs-lisp
     (global-hl-line-mode t)
   #+end_src

** Sounds
   Disable ring bell.

   #+begin_src emacs-lisp
     (setq ring-bell-function 'ignore)
   #+end_src

** Font size
   Set font size.

   #+begin_src emacs-lisp
     (set-face-attribute 'default nil :height 110)
   #+end_src

** Word wrap
   Enable word wrap
   #+begin_src emacs-lisp
     (global-visual-line-mode t)
   #+end_src

** Buffers
   Kill all but current buffer.

   #+begin_src emacs-lisp
     (defun kill-other-buffers ()
       "Kill all other buffers."
       (interactive)
       (mapc 'kill-buffer (delq (current-buffer) (buffer-list))))
   #+end_src

** Reload init
   Reload init.el file.

   #+begin_src emacs-lisp
     (defun reload-init ()
       "Reload init.el."
       (interactive)
       (load-file user-init-file))
   #+end_src

** Line numbers
   Enable line numbers with a few exceptions.

   #+begin_src emacs-lisp
     (column-number-mode)
     (global-display-line-numbers-mode t)

     (dolist (mode '(org-mode-hook
                     vterm-mode-hook
                     treemacs-mode-hook))
       (add-hook mode (lambda () (display-line-numbers-mode 0))))
   #+end_src

* Themes
  Color theme.

** Spacemacs theme
   Use the nice spacemacs theme.

   #+begin_src emacs-lisp
     (use-package spacemacs-theme
       :defer t
       :init (load-theme 'spacemacs-dark t))
   #+end_src

** Spaceline
   Beautiful modeline.

   #+begin_src emacs-lisp
     (use-package spaceline
       :config
       (require 'spaceline-config)
       (setq powerline-default-separator 'wave)
              (spaceline-spacemacs-theme))
   #+end_src

* Git
  Git related configurations.

** Magit
   Interactions with git.

   #+begin_src emacs-lisp
     (use-package magit)
   #+end_src

** Git-gutter
   Visual git indicators.

   #+begin_src emacs-lisp
     (use-package git-gutter
       :config
       (global-git-gutter-mode +1)
       (custom-set-variables '(git-gutter:update-interval 2)))
   #+end_src

* Vterm
  Better terminal emulation.

  #+begin_src emacs-lisp
    (use-package multi-vterm
      :bind ("C-x t" . multi-vterm-dedicated-toggle))
  #+end_src

* Lsp, completion, lint, snippets
  Language server protocol support.

** Lsp-mode
   Minimal setup.
  #+begin_src emacs-lisp
    (use-package lsp-mode
      :init
      (setq lsp-keymap-prefix "C-c l")
      :hook
      ;; (prog-mode . lsp-deferred)
      (go-mode . lsp-deferred)
      (lsp-mode . lsp-enable-which-key-integration))

    (use-package helm-lsp :commands helm-lsp-workspace-symbol)

    (use-package lsp-treemacs :commands lsp-treemacs-errors-list)
  #+end_src

** Company
   Completion framework.

   #+begin_src emacs-lisp
     (use-package company
       :config
       (setq company-idle-delay 0.0)
       (setq company-minimum-prefix-length 1)
       (global-company-mode t))
   #+end_src

** Company-quickhelp
   Documentation pop-up.

   #+begin_src emacs-lisp
     (use-package company-quickhelp
       :config
       (company-quickhelp-mode))
   #+end_src

** Company-box
   Add icons to company-mode.

   #+begin_src emacs-lisp
     (use-package company-box
       :hook (company-mode . company-box-mode))
   #+end_src

** Flycheck
   Modern syntax checker.

   #+begin_src emacs-lisp
     (use-package flycheck
       :init (global-flycheck-mode))
   #+end_src

** Yasnippet
   Templating and snippet system.

   #+begin_src emacs-lisp
     (use-package yasnippet
       :config
       (yas-global-mode 1))

     (use-package yasnippet-snippets)
   #+end_src

* Which key
  Minor mode to show keybindings in a buffer.

  #+begin_src emacs-lisp
    (use-package which-key
      :config
      (which-key-mode)
      (which-key-setup-minibuffer)
      (setq which-key-idle-delay 10000))
  #+end_src

* Smartparens
   Dealing with pairs.

   #+begin_src emacs-lisp
     (use-package smartparens
       :config
       (require 'smartparens-config)
       (smartparens-global-mode))
   #+end_src
 
* Indent-guides
   Show vertical lines to guide indentation.

   #+begin_src emacs-lisp
     (use-package indent-guide
       :config
       (indent-guide-global-mode)
       ;; (set-face-background 'indent-guide-face "dimgray")
       )
   #+end_src

* Emojify
  Display emojis.

   #+begin_src emacs-lisp
     (use-package emojify
       :hook (after-init . global-emojify-mode))

     (use-package company-emoji
       :config
       (add-to-list 'company-backends 'company-emoji))
   #+end_src

* Anzu
  Display current search.
  
  #+begin_src emacs-lisp
    (use-package anzu
      :config
      (global-set-key [remap query-replace] 'anzu-query-replace)
      (global-set-key [remap query-replace-regexp] 'anzu-query-replace-regexp)
      (global-anzu-mode +1))
  #+end_src

* Helm
  Powerfull search tool.
  
  #+begin_src emacs-lisp
    (use-package helm
      :config
      (global-set-key (kbd "M-x") #'helm-M-x)
      (global-set-key (kbd "C-x r b") #'helm-filtered-bookmarks)
      (global-set-key (kbd "C-x C-f") #'helm-find-files)
      (helm-mode 1))
  #+end_src

* Treemacs
  File explorer.

  #+begin_src emacs-lisp
    (use-package treemacs
      :config
      (progn
        (setq treemacs-position 'right))
      (treemacs-follow-mode t))

    (use-package treemacs-icons-dired
      :hook (dired-mode . treemacs-icons-dired-enable-once))

    (use-package treemacs-magit
      :after (treemacs magit))

    (use-package treemacs-projectile
      :after (treemacs projectile))
  #+end_src

* Projectile
  Project management.

   #+begin_src emacs-lisp
     (use-package projectile
       :config
       (projectile-mode +1)
       (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
       (setq projectile-project-search-path '("~" "~/spaghetti/private/" "~/spaghetti/dfds/"))
       (projectile-discover-projects-in-search-path))

     (use-package helm-projectile
       :config
       (helm-projectile-on))
   #+end_src

* Kubernetes
  Controll Kubernetes with limited permissions.

  #+begin_src emacs-lisp
    (use-package kubernetes
      :commands (kubernetes-overview))
  #+end_src

* Elfeed
  RSS feed reader.

  #+begin_src emacs-lisp
    (use-package elfeed
      :config
      (setq elfeed-feeds
            '(("https://xkcd.com/rss.xml" comic))))
  #+end_src

* Golang
  Setup for golang.

  #+begin_src emacs-lisp
    (use-package go-mode
      :config
      (add-hook 'go-mode-hook (lambda () (setq tab-width 4
                                               indent-tabs-mode 1))))
  #+end_src

  Install deps.
  #+begin_src shell
    go install golang.org/x/tools/gopls@latest
  #+end_src

* Exec path from shell
  Ensure environment variables is the same as in shell.

  #+begin_src emacs-lisp
    (use-package exec-path-from-shell
      :config
      (exec-path-from-shell-initialize))
  #+end_src
