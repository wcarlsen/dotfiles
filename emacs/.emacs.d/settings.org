#+TITLE: Emacs config
#+PROPERTY: header-args:emacs-lisp :tangle ~/.emacs.d/init.el

* Package manager

Setup straight package manager.

#+begin_src emacs-lisp
(defvar bootstrap-version)
(let ((bootstrap-file
       (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
      (bootstrap-version 5))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
        (url-retrieve-synchronously
         "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
         'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))
#+end_src

Setup straught integration with use-package.

#+begin_src emacs-lisp
  (straight-use-package 'use-package)
  (setq straight-use-package-by-default t)
#+end_src
* Basic

Set basic configurations.

#+begin_src emacs-lisp
  (tool-bar-mode -1)
  (tooltip-mode -1)
  (scroll-bar-mode -1)
  (menu-bar-mode -1)
  (setq ring-bell-function 'ignore)
  (global-hl-line-mode t)
  (show-paren-mode 1)
  ;; (linum-mode 1)
  (defalias 'yes-or-no-p 'y-or-n-p)
  (setq make-backup-files nil)
  ;; (setq inhibit-startup-message t)
  (global-visual-line-mode t)
  (set-face-attribute 'default nil :height 110)
#+end_src

* Org mode

Require org templates and add source code block snippit.

#+begin_src emacs-lisp 
  (require 'org-tempo)
  (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
  (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
#+end_src

Configure babel languages
#+begin_src emacs-lisp
  (org-babel-do-load-languages
    'org-babel-load-languages
    '((emacs-lisp . t)
      (shell . t)))

  (push '("conf-unix" . conf-unix) org-src-lang-modes)
#+end_src

Autotangle configuration files.

#+begin_src emacs-lisp
  (defun efs/org-babel-tangle-config ()
    (when (string-equal (buffer-file-name)
			(expand-file-name "~/.emacs.d/settings.org"))
      ;; Dynamic scoping to the rescue
      (let ((org-confirm-babel-evaluate nil))
	(org-babel-tangle))))

  (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'efs/org-babel-tangle-config)))
#+end_src

Pretty org mode with org-bullets.
#+begin_src emacs-lisp
(use-package org-bullets
  :config
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
#+end_src

* Markdown

Configure markdown.

#+begin_src emacs-lisp
(use-package markdown-mode
  :mode (("\\.md\\'" . gfm-mode))
  :commands (markdown-mode gfm-mode)
  :config
  (setq markdown-command "pandoc -t html5")
  (add-hook 'markdown-mode-hook 'flyspell-mode))
#+end_src

Preview with impatient-mode.

#+begin_src emacs-lisp
(use-package simple-httpd
  :config
  (setq httpd-port 7070)
  (setq httpd-host (system-name)))

(use-package impatient-mode
  :commands impatient-mode)

(defun my-markdown-filter (buffer)
  (princ
   (with-temp-buffer
     (let ((tmp (buffer-name)))
       (set-buffer buffer)
       (set-buffer (markdown tmp))
       (format "<!DOCTYPE html><html><title>Markdown preview</title><link rel=\"stylesheet\" href = \"https://cdnjs.cloudflare.com/ajax/libs/github-markdown-css/4.0.0/github-markdown.min.css\"/>
<body><article class=\"markdown-body\" style=\"box-sizing: border-box;min-width: 200px;max-width: 980px;margin: 0 auto;padding: 45px;\">%s</article></body></html>" (buffer-string))))
   (current-buffer)))

(defun my-markdown-preview ()
  "Preview markdown."
  (interactive)
  (unless (process-status "httpd")
    (httpd-start))
  (impatient-mode)
  (imp-set-user-filter 'my-markdown-filter)
  (imp-visit-buffer))
#+end_src

* Theme

Load color theme.

#+begin_src emacs-lisp
(use-package spacemacs-theme
  :no-require t
  :init
  (load-theme 'spacemacs-dark t)
  (setq spacemacs-theme-org-agenda-height nil)
  (setq powerline-default-separator 'wave)
  (setq spacemacs-theme-org-height nil))
#+end_src

* Mode line

Configure mode line.

#+begin_src emacs-lisp
  (use-package spaceline
    :config
    (spaceline-helm-mode 1)
    (spaceline-spacemacs-theme))
#+end_src

* Yaml

Configure yaml.

#+begin_src emacs-lisp
  (use-package yaml-mode
    :config
    (add-to-list 'auto-mode-alist '("\\.yml\\'" . yaml-mode))
    (add-to-list 'auto-mode-alist '("\\.yaml\\'" . yaml-mode))
    (add-hook 'yaml-mode-hook 
       '(lambda ()
	  (define-key yaml-mode-map "\C-m" 'newline-and-indent))))
#+end_src

* Highlight-ident-guides

Setting indent guides.

#+begin_src emacs-lisp
(use-package highlight-indent-guides
  :config
  (add-hook 'prog-mode-hook 'highlight-indent-guides-mode)
  (add-hook 'yaml-mode 'highlight-indent-guides-mode)
  (setq highlight-indent-guides-method 'bitmap))
#+end_src

* Which-key

Setup which-key for help.

#+begin_src emacs-lisp
  (use-package which-key
    :config 
    (which-key-mode))
#+end_src

#+RESULTS:
: t

* Helm

Use helm.

#+begin_src emacs-lisp
(use-package helm
  :config
  (global-set-key (kbd "M-x") #'helm-M-x)
  (global-set-key (kbd "C-x r b") #'helm-filtered-bookmarks)
  (global-set-key (kbd "C-x C-f") #'helm-find-files)
  (helm-mode 1))
#+end_src

* Company-mode

Configure company mode.

#+begin_src emacs-lisp
  (use-package company
    :config
    (setq company-idle-delay 0.0)
    (setq company-minimum-prefix-length 1)
    (add-hook 'after-init-hook 'global-company-mode))

  ;; (use-package company-box
  ;;   :hook (company-mode . company-box-mode))
#+end_src

* Flycheck

Setup Flycheck.

#+begin_src emacs-lisp
(use-package flycheck
  :defer t
  :hook (company-mode . flycheck-mode))
#+end_src

* Snippets

Configure snippets.

#+begin_src emacs-lisp
(use-package yasnippet
  :hook (prog-mode . yas-minor-mode)
  :config
  (yas-reload-all))
#+end_src

* Smart parens

Setup smart parans.

#+begin_src emacs-lisp
(use-package smartparens
  :hook (prog-mode . smartparens-mode))
#+end_src

* Rainbow delimeters

Setup rainbox delimeters

#+begin_src emacs-lisp
(use-package rainbow-delimiters
  :hook (prog-mode . rainbow-delimiters-mode))
#+end_src

* Elpy

Setup elpy.

#+begin_src emacs-lisp
(use-package elpy
  :init
  (elpy-enable))
#+end_src

* Terraform

Config Terraform.

#+begin_src emacs-lisp
(use-package terraform-mode)
#+end_src
