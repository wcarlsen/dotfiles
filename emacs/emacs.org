#+TITLE: Emacs config
#+AUTHOR: wcarlsen (Willi Carlsen)
#+PROPERTY: header-args:emacs-lisp :tangle ~/.emacs.d/init.el :results silent

* Package manager
  Straight package manager for the Emacs hacker.

  Bootstraping.
  #+begin_src emacs-lisp
    (defvar bootstrap-version)
    (let ((bootstrap-file
	   (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
	  (bootstrap-version 5))
      (unless (file-exists-p bootstrap-file)
	(with-current-buffer
	    (url-retrieve-synchronously
	     "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
	     'silent 'inhibit-cookies)
	  (goto-char (point-max))
	  (eval-print-last-sexp)))
      (load bootstrap-file nil 'nomessage))
  #+end_src

  Prevent package.el loading packages prior to init-file loading
  #+begin_src emacs-lisp
	(setq package-enable-at-startup nil
	      straight-use-package-by-default t)
  #+end_src

  Use use-package.
  #+begin_src emacs-lisp
    (straight-use-package 'use-package)
  #+end_src

* Basics
  Basic configurations.
  
** Better defaults
   Better defaults disables menu bars among other things.

   #+begin_src emacs-lisp
     (use-package better-defaults)
   #+end_src

** Backup/swap files
   Disable stupid backup/swap files.

    #+begin_src emacs-lisp
        (setq make-backup-files nil
              auto-save-default nil)
    #+end_src   

** Line highlight
   Highlight current line.

   #+begin_src emacs-lisp
     (global-hl-line-mode t)
   #+end_src

** Sounds
   Disable ring bell.

   #+begin_src emacs-lisp
     (setq ring-bell-function 'ignore)
   #+end_src

** Font size
   Set font size.

   #+begin_src emacs-lisp
     (set-face-attribute 'default nil :height 110)
   #+end_src

** Word wrap
   Enable word wrap
   #+begin_src emacs-lisp
     (global-visual-line-mode t)
   #+end_src

* Org
  Org configurations.

** Pretty bullets
   Configure pretty bullets.

   #+begin_src emacs-lisp
     (use-package org-bullets
       :config
       (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
   #+end_src

** Template snippets
   Org templates and add source code block snippit.

   #+begin_src emacs-lisp 
     (require 'org-tempo)
     (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
     (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
   #+end_src

** Auto tangle
   Autotangle configuration files.

   #+begin_src emacs-lisp
     (defun efs/org-babel-tangle-config ()
       (when (string-equal (buffer-file-name)
                           (expand-file-name "~/emacs.org"))
         ;; Dynamic scoping to the rescue
         (let ((org-confirm-babel-evaluate nil))
           (org-babel-tangle))))

     (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'efs/org-babel-tangle-config)))
   #+end_src

* Markdown
  Configuring Markdown.

** Markdown-mode
   Markdown major mode for editing.

   #+begin_src emacs-lisp
     (use-package markdown-mode
       :commands (markdown-mode gfm-mode)
       :mode (("README\\.md\\'" . gfm-mode)
         ("\\.md\\'" . markdown-mode)
         ("\\.markdown\\'" . markdown-mode))
       :init (setq markdown-command "multimarkdown"))
   #+end_src

* Themes
  Color theme.

** Spacemacs theme
   Use the nice spacemacs theme.

   #+begin_src emacs-lisp
     (use-package spacemacs-theme
       :defer t
       :init (load-theme 'spacemacs-dark t))
   #+end_src

** Spaceline
Beautiful modeline.

#+begin_src emacs-lisp
(use-package spaceline
  :config
  (require 'spaceline-config)
  (setq powerline-default-separator 'wave)
  (setq spaceline-highlight-face-func 'spaceline-highlight-face-evil-state)
  (spaceline-spacemacs-theme))
#+end_src

* Vim
  Configure vi like behaviour.

** Evil
   Vi layer.

   #+begin_src emacs-lisp
     (use-package evil
       :init
       (setq evil-want-integration t) ;; This is optional since it's already set to t by default.
       (setq evil-want-keybinding nil)
       :config
       (evil-mode 1)
       (evil-ex-define-cmd "ls" 'ibuffer))
   #+end_src
   
** Evil-collection
   A Collection of Evil bindings.

   #+begin_src emacs-lisp
     (use-package evil-collection
       :after evil
       :config
       (evil-collection-init))
   #+end_src
   
** Evil-commentary
   Easy commenting.

   #+begin_src emacs-lisp
     (use-package evil-commentary
       :config
       (evil-commentary-mode))
   #+end_src

* File explorer
  Setup a file explorer.

** Neotree
   Setup simple file explorer.

   #+begin_src emacs-lisp
     (use-package neotree
       :config
       (global-set-key [f8] 'neotree-toggle)
       (setq projectile-switch-project-action 'neotree-projectile-action-hide
             neo-window-position 'right
             neo-theme (if (display-graphic-p) 'icons 'arrow)))

     (defun neotree-projectile-action-hide()
       (neotree-projectile-action)
       (neotree-toggle))
   #+end_src
   
** All-the-icons
   Display icons for Neotree.

   #+begin_src emacs-lisp
     (use-package all-the-icons
       :after neotree)
   #+end_src
  
# ** Treemacs
#    Configure Treemacs a NerdTree like file explorer.

#    #+begin_src emacs-lisp
#      (use-package treemacs
#        :config
#        (setq treemacs-position 'right)
#        (treemacs-filewatch-mode t)
#        (treemacs-follow-mode t))
#    #+end_src

# ** Treemacs-evil
#    Setup evil for treemacs.

#    #+begin_src emacs-lisp
#      (use-package treemacs-evil
#        :after (treemacs evil))
#    #+end_src

# ** Treemacs-projectile
#    Treemacs projectile plugin.

#    #+begin_src emacs-lisp
#      (use-package treemacs-projectile
#        :after (treemacs projectile))
#    #+end_src

# ** Treemacs-icons-dired
#    Use Treemacs icons in dired.

#    #+begin_src emacs-lisp
#      (use-package treemacs-icons-dired
#        :after (treemacs dired)
#        :config
#        (treemacs-icons-dired-mode))
#    #+end_src

* Project management
  Project management.

** Projectile
   Project interaction libary.

   #+begin_src emacs-lisp
     (use-package projectile
       :config
       (projectile-mode +1)
       (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
       (setq projectile-project-search-path '("~" "~/spaghetti/private/" "~/spaghetti/dfds/"))
       (projectile-discover-projects-in-search-path))
   #+end_src

* Git
  Git related configurations.

** Magit
   Interactions with git.

   #+begin_src emacs-lisp
     (use-package magit)
   #+end_src

** Git-gutter
   Visual git indicators.

   #+begin_src emacs-lisp
     (use-package git-gutter
       :config
       (global-git-gutter-mode +1)
       (custom-set-variables '(git-gutter:update-interval 2)))
   #+end_src

* Terminal
  Configure terminal setup.

** Multiterm
   Managing multiple terminals.

   #+begin_src emacs-lisp
     (use-package multi-term
       :config
       (setq multi-term-program "/bin/zsh"))
   #+end_src

* Completion
  Auto-complete.

** Company
   Completion framework.

   #+begin_src emacs-lisp
     (use-package company
       :config
       (setq company-idle-delay 0.0)
       (setq company-minimum-prefix-length 1)
       (global-company-mode t))
   #+end_src

** Dumb-jump
   Near zero configuration definition jumping.

   #+begin_src emacs-lisp
     (use-package dumb-jump
       :config
       (add-hook 'xref-backend-functions #'dumb-jump-xref-activate))
   #+end_src

* Terraform
  Configure Terraform.

** Terraform-mode
   Setup Terraform-mode.

   #+begin_src emacs-lisp
     (use-package terraform-mode)
   #+end_src

* Yaml
  Configure yaml.

** Yaml-mode
   Major mode for yaml.

   #+begin_src emacs-lisp
     (use-package yaml-mode
       :config
       (add-to-list 'auto-mode-alist '("\\.yml\\'" . yaml-mode))
       (add-to-list 'auto-mode-alist '("\\.yaml\\'" . yaml-mode))
       (add-hook 'yaml-mode-hook
       '(lambda ()
         (define-key yaml-mode-map "\C-m" 'newline-and-indent))))
   #+end_src

